<!--
Copyright LWJGL. All rights reserved.
License terms: http://lwjgl.org/license.php
-->
<project name="native-windows" basedir="../.." xmlns:if="ant:if" xmlns:unless="ant:unless">
	<import file="../build-definitions.xml"/>

	<condition property="LWJGL_LIBRARY" value="lwjgl.dll" else="lwjgl32.dll">
		<equals arg1="${build.arch}" arg2="x64"/>
	</condition>

	<fileset id="link-objects" dir="${bin.native}" includes="*.obj"/>
	<fileset id="link-libraries" dir="${lib}/windows/${build.arch}/">
		<include name="libffi.lib"/>
		<include name="glfw3.lib" if:true="${binding.glfw}"/>
	</fileset>
	<!--<fileset id="link-libraries-egl" dir="C:/PROJECTS/LWJGL Project/gles_sdk/x86-64">
		<include name="libEGL.lib"/>
		<include name="libGLESv2.lib"/>
	</fileset>-->

	<macrodef name="cl">
		<element name="arguments"/>
		<sequential>
			<apply executable="cl" dest="${bin.native}" skipemptyfilesets="true" failonerror="true" relative="true" parallel="true" taskname="Compiler">
				<!-- TODO: Fix deprecated API usages and remove C4996 ignore -->
				<arg line="/c /Wall /WX /EHsc /Ox /Gy /GR- /MT /MP /nologo /DLWJGL_WINDOWS"/>
				<arg value="/Fo${bin.native}\"/>

				<arg value="/I${java.home}\..\include"/>
				<arg value="/I${java.home}\..\include\win32"/>

				<arg value="/I${src.include}\system"/>
				<arg value="/I${src.include}\system\windows"/>

				<arguments/>

				<regexpmapper from="(\w+)\.c" to="\1.obj"/>
			</apply>
		</sequential>
	</macrodef>

	<target name="compile-native-platform">
		<!-- COMPILE -->
		<cl>
			<arguments>
				<arg value="/I${src.include}\system\libffi"/>
				<fileset dir=".">
					<include name="${src.native}/system/*.c"/>
					<include name="${src.native}/system/libffi/*.c"/>
					<include name="${src.generated.native}/system/*.c"/>
					<include name="${src.generated.native}/system/libffi/*.c"/>
					<include name="${src.generated.native}/system/windows/*.c"/>
				</fileset>
			</arguments>
		</cl>

		<!-- Each binding is compiled separately to avoid command length limits in Windows cmd -->

		<cl if:true="${binding.stb}">
			<arguments>
				<arg value="/I${src.include}\stb"/>
				<fileset dir="." includes="${src.generated.native}/stb/*.c"/>
			</arguments>
		</cl>

		<cl if:true="${binding.glfw}">
			<arguments>
				<arg value="/I${src.include}\glfw"/>
				<arg value="/I${src.include}\egl" if:true="${binding.egl}"/>
				<fileset dir=".">
					<include name="${src.generated.native}/glfw/*.c"/>
					<include name="${src.generated.native}/glfw/windows/*.c"/>
					<include name="${src.generated.native}/glfw/egl/*.c" if:true="${binding.egl}"/>
				</fileset>
			</arguments>
		</cl>

		<cl if:true="${binding.openal}">
			<arguments>
				<arg value="/I${src.include}\openal"/>
				<fileset dir="." includes="${src.generated.native}/openal/*.c"/>
			</arguments>
		</cl>

		<cl if:true="${binding.opencl}">
			<arguments>
				<arg value="/I${src.include}\opencl"/>
				<arg value="/I${src.include}\opengl" if:true="${binding.opengl}"/>
				<fileset dir="." includes="${src.generated.native}/opencl/*.c"/>
			</arguments>
		</cl>

		<cl if:true="${binding.opengl}">
			<arguments>
				<arg value="/I${src.include}\opengl"/>
				<arg value="/I${src.include}\opengl\wgl"/>
				<arg value="/I${src.include}\opencl" if:true="${binding.opencl}"/>
				<fileset dir=".">
					<include name="${src.generated.native}/opengl/*.c"/>
					<include name="${src.generated.native}/opengl/wgl/*.c"/>
				</fileset>
			</arguments>
		</cl>

		<cl if:true="${binding.opengles}">
			<arguments>
				<arg value="/I${src.include}\opengles"/>
				<fileset dir="." includes="${src.generated.native}/opengles/*.c"/>
			</arguments>
		</cl>

		<cl if:true="${binding.egl}">
			<arguments>
				<arg value="/I${src.include}\egl"/>
				<fileset dir="." includes="${src.generated.native}/egl/*.c"/>
			</arguments>
		</cl>

		<cl if:true="${binding.ovr}">
			<arguments>
				<arg value="/I${OCULUS_SDK_PATH}\LibOVR\Include"/>
				<fileset dir="." includes="${src.generated.native}/ovr/*.c"/>
			</arguments>
		</cl>

		<!-- Compile the LibOVR CAPI shim -->
		<apply executable="cl" dest="${bin.native}" skipemptyfilesets="true" failonerror="true" parallel="true" taskname="Compiler" if:true="${binding.ovr}">
			<arg line="/c /W4 /EHsc /Ox /Gy /GR- /MT /MP /nologo"/>
			<arg value="/Fo${bin.native}\"/>

			<arg value="/I${OCULUS_SDK_PATH}\LibOVR\Include"/>
			<fileset dir="${OCULUS_SDK_PATH}/LibOVR/Src" includes="*"/>

			<mapper type="regexp" from="(\w+)[.]c(?:pp)?$" to="\1.obj"/>
		</apply>

		<!-- LINK -->
		<uptodate property="link-uptodate" targetfile="${lib}/${LWJGL_LIBRARY}">
			<srcfiles file="config/${platform}/build.xml"/>
			<srcfiles refid="link-objects"/>
			<srcfiles refid="link-libraries"/>
		</uptodate>

		<antcall target="-link-if-necessary" />
	</target>

	<target name="-link-if-necessary" unless="link-uptodate">
		<antcall target="-link"/>
	</target>

	<target name="-update-dependencies-x86">
		<mkdir dir="${lib}/windows"/>
		<mkdir dir="${lib}/windows/x86"/>

		<update-dependency name="OpenAL32 (x86)" artifact="x86/OpenAL32.dll" dest="${lib}/OpenAL32.dll" if:true="${binding.openal}"/>
		<update-dependency name="glfw3 (x86)" artifact="x86/glfw3.lib" if:true="${binding.glfw}"/>
		<update-dependency name="libffi (x86)" artifact="x86/libffi.lib"/>
	</target>

	<target name="-update-dependencies-x64">
		<mkdir dir="${lib}/windows"/>
		<mkdir dir="${lib}/windows/x64"/>

		<update-dependency name="OpenAL32 (x64)" artifact="x64/OpenAL32.dll" dest="${lib}/OpenAL.dll" if:true="${binding.openal}"/>
		<update-dependency name="glfw3 (x64)" artifact="x64/glfw3.lib" if:true="${binding.glfw}"/>
		<update-dependency name="libffi (x64)" artifact="x64/libffi.lib"/>
	</target>

	<target name="-update-dependencies" unless="${build.offline}">
		<antcall target="-update-dependencies-${build.arch}"/>
	</target>

	<target name="-link" depends="-update-dependencies">
		<!-- Output object list to a file to avoid command length limits in Windows cmd -->
		<local name="objects"/>
		<pathconvert property="objects" pathsep="${line.separator}">
			<fileset refid="link-objects"/>
			<map from="${basedir}\" to=""></map>
		</pathconvert>
		<echo file="${bin.native}/objects.ant">${objects}</echo>

		<!-- Link -->
		<apply executable="cl" failonerror="true" parallel="true" taskname="Linker">
			<arg line='/LD /WX /nologo /Fe:"${lib}\${LWJGL_LIBRARY}"'/>

			<arg value="@${bin.native}\objects.ant"/>
			<srcfile/>
			<fileset refid="link-libraries"/>

			<arg line="/link /OPT:REF,ICF /DLL"/>
			<arg value="Kernel32.lib"/>
			<arg value="user32.lib"/>
			<arg value="Gdi32.lib"/>
			<arg value="winmm.lib"/>
			<arg value="shell32.lib"/>
			<arg value="OpenGL32.lib" if:true="${binding.opengl}"/>
		</apply>

		<!-- Compress -->
		<apply executable="${org.lwjgl.upx}/upx" failonerror="true" taskname="UPX" if:set="org.lwjgl.upx">
			<arg value="-9"/>
			<filelist dir="${lib}" files="${LWJGL_LIBRARY}"/>
		</apply>
	</target>
</project>