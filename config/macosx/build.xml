<!--
  ~ Copyright LWJGL. All rights reserved.
  ~ License terms: https://www.lwjgl.org/license
  -->
<project name="native-macosx" basedir="../.." xmlns:if="ant:if" xmlns:unless="ant:unless">
	<import file="../build-definitions.xml"/>

	<!-- Ask Xcode for correct path to XCode tools -->
	<!-- Will fail if XCode Command Line Tools are not installed on 10.7+ (Lion) -->
	<exec executable="xcode-select" outputproperty="developer_path" errorproperty="xcode-error" failonerror="false" failifexecutionfails="false">
		<arg value="--print-path"/>
	</exec>
	<!-- Default to /Developer if xcode-select fails -->
	<condition property="developer_path" value="/Developer">
		<isset property="xcode-error"/>
	</condition>

	<!-- Choose a MacOSX SDK -->
	<macrodef name="find-sdkroot">
		<attribute name="version"/>

		<sequential>
			<condition property="sdkroot" value="${developer_path}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX@{version}.sdk">
				<and>
					<not><isset property="sdkroot"/></not>
					<available file="${developer_path}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX@{version}.sdk" type="dir"/>
				</and>
			</condition>
		</sequential>
	</macrodef>

	<find-sdkroot version="10.12"/>
	<find-sdkroot version="10.11"/>
	<find-sdkroot version="10.10"/>
	<find-sdkroot version="10.9"/>
	<find-sdkroot version="10.8"/>
	<condition property="compiler" value="clang" else="gcc"> <!-- Use clang on 10.8 or newer, gcc on 10.7 -->
		<isset property="sdkroot"/>
	</condition>
	<find-sdkroot version="10.7"/>
	<fail unless="sdkroot" message="Failed to find the MacOS X SDK."/>

	<property name="macosx-version-min" value="10.7"/>

	<property name="src.include.rel" value="../../../../${src.include}"/>
	<property name="src.native.rel" value="../../../../${src.native}"/>

	<macrodef name="compile">
		<attribute name="dest"/>
		<attribute name="flags"/>
		<attribute name="relative" default="true"/>
		<element name="source" implicit="true"/>
		<sequential>
			<mkdir dir="@{dest}"/>
			<apply dir="@{dest}" executable="${compiler}" dest="@{dest}" skipemptyfilesets="true" failonerror="true" parallel="true" taskname="Compiler">
				<arg line="-c -std=c11 -ObjC -O3 -flto -fPIC @{flags} -DLWJGL_MACOSX -DLWJGL_${build.arch} -isysroot ${sdkroot} -mmacosx-version-min=${macosx-version-min}"/>

				<arg value="-I${jni.headers}"/>
				<arg value="-I${jni.headers}/darwin"/>

				<arg value="-I${src.include.rel}/system"/>
				<arg value="-I${src.include.rel}/system/macosx"/>

				<source/>

				<regexpmapper from="(\w+)\.(c|m)" to="\1.o"/>
			</apply>
		</sequential>
	</macrodef>

	<macrodef name="build">
		<attribute name="name"/>
		<attribute name="dest"/>
		<attribute name="flags" default="-Werror -Wfatal-errors -Wall -Wextra -pedantic -Wno-extended-offsetof"/>
		<element name="source"/>
		<element name="link" optional="true"/>
		<sequential>
			<compile dest="@{dest}" flags="@{flags}">
				<source/>
			</compile>

			<local name="lib-uptodate"/>
			<uptodate property="lib-uptodate" targetfile="${lib}/lib@{name}.dylib">
				<srcfiles file="config/${platform}/build.xml"/>
				<srcfiles dir="@{dest}" includes="**"/>
			</uptodate>

			<!-- Lazily update dependencies -->
			<local name="update-dependencies"/>
			<condition property="update-dependencies" value="true">
				<not>
					<or>
						<isset property="dependencies-uptodate"/>
						<isset property="lib-uptodate"/>
						<istrue value="${build.offline}"/>
					</or>
				</not>
			</condition>
			<antcall target="-update-dependencies" if:set="update-dependencies"/>
			<property name="dependencies-uptodate" value="true" if:set="update-dependencies"/>
			
			<apply executable="${compiler}" failonerror="true" parallel="true" taskname="Linker" unless:set="lib-uptodate">
				<srcfile/>
				<arg line='-dynamiclib -Wl,-no_compact_unwind -mmacosx-version-min=${macosx-version-min} -o ${lib}/lib@{name}.dylib -O3 -flto -fPIC'/>
				<fileset dir="@{dest}" includes="*.o"/>
				<link/>
			</apply>

			<apply executable="strip" failonerror="true" taskname="Symbol strip" unless:set="lib-uptodate">
				<arg value="-u"/>
				<arg value="-r"/>
				<filelist dir="${lib}" files="lib@{name}.dylib"/>
			</apply>
		</sequential>
	</macrodef>

	<target name="compile-native-platform">
		<echo message="${sdkroot}" taskname="SDK Root"/>

		<!-- CORE -->
		<build name="lwjgl" dest="${bin.native}/core">
			<source>
				<arg value="-I${src.include.rel}/system/dyncall"/>
				<fileset dir=".">
					<include name="${src.native}/system/*.c"/>
					<exclude name="${src.native}/system/lwjgl_malloc.c"/>
					<include name="${src.generated.native}/system/*.c"/>
					<include name="${src.generated.native}/system/dyncall/*.c"/>
					<include name="${src.generated.native}/system/jawt/*.c" if:true="${binding.jawt}"/>
					<include name="${src.generated.native}/system/libc/*.c"/>
					<include name="${src.generated.native}/system/macosx/*.c"/>
				</fileset>
			</source>
			<link>
				<arg line="-framework CoreFoundation"/>
				<fileset dir="${lib}/macosx/${build.arch}/">
					<include name="libdyn*.a"/>
				</fileset>
			</link>
		</build>

		<!-- LMDB -->
		<compile dest="${bin.native}/lmdb" flags="-Wno-format-extra-args" if:true="${binding.lmdb}">
			<arg value="-I${src.include.rel}/util/lmdb"/>
			<fileset dir="." includes="${src.include}/util/lmdb/*.c"/>
		</compile>
		<build name="lwjgl_lmdb" dest="${bin.native}/lmdb" if:true="${binding.lmdb}">
			<source>
				<arg value="-I${src.include.rel}/util/lmdb"/>
				<fileset dir="." includes="${src.generated.native}/util/lmdb/*.c"/>
			</source>
		</build>

		<!-- NanoVG -->
		<build name="lwjgl_nanovg" dest="${bin.native}/nanovg" if:true="${binding.nanovg}">
			<source>
				<arg value="-I${src.include.rel}/nanovg"/>
				<arg value="-I${src.include.rel}/stb"/>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/nanovg/*.c"/>
			</source>
		</build>

		<!-- NativeFileDialog -->
		<build name="lwjgl_nfd" dest="${bin.native}/nfd" if:true="${binding.nfd}">
			<source>
				<arg value="-I${src.include.rel}/util/nfd"/>
				<arg value="-I${src.include.rel}/util/nfd/include"/>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.include}/util/nfd/nfd_common.c"/>
				<fileset dir="." includes="${src.include}/util/nfd/nfd_cocoa.m"/>
				<fileset dir="." includes="${src.generated.native}/util/nfd/*.c"/>
			</source>
			<link>
				<arg line="-framework AppKit"/>
			</link>
		</build>

		<!-- Nuklear -->
		<build name="lwjgl_nuklear" dest="${bin.native}/nuklear" if:true="${binding.nuklear}">
			<source>
				<arg value="-I${src.include.rel}/nuklear"/>
				<fileset dir="." includes="${src.generated.native}/nuklear/*.c"/>
			</source>
		</build>

		<!-- ParShapes -->
		<build name="lwjgl_par" dest="${bin.native}/par" if:true="${binding.par}">
			<source>
				<arg value="-I${src.include.rel}/util/par"/>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/util/par/*.c"/>
			</source>
		</build>

		<!-- SSE -->
		<build name="lwjgl_sse" dest="${bin.native}/sse" if:true="${binding.sse}">
			<source>
				<arg value="-I${src.include.rel}/util"/>
				<fileset dir="." includes="${src.generated.native}/util/simd/*.c"/>
			</source>
		</build>

		<!-- stb -->
		<build name="lwjgl_stb" dest="${bin.native}/stb" if:true="${binding.stb}">
			<source>
				<arg value="-I${src.include.rel}/stb"/>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/stb/*.c"/>
			</source>
		</build>

		<!-- tiny file dialogs -->
		<compile dest="${bin.native}/tinyfd" flags="" if:true="${binding.tinyfd}">
			<arg value="-I${src.include.rel}/util/tinyfd"/>
			<fileset dir="." includes="${src.native}/util/tinyfd/*.c"/>
		</compile>
		<build name="lwjgl_tinyfd" dest="${bin.native}/tinyfd" if:true="${binding.tinyfd}">
			<source>
				<arg value="-I${src.include.rel}/util/tinyfd"/>
				<fileset dir="." includes="${src.generated.native}/util/tinyfd/*.c"/>
			</source>
		</build>

		<!-- xxHash -->
		<build name="lwjgl_xxhash" dest="${bin.native}/xxhash" if:true="${binding.xxhash}">
			<source>
				<arg value="-I${src.include.rel}/system"/>
				<arg value="-I${src.include.rel}/util/xxhash"/>
				<arg value="-I${src.native.rel}/util/xxhash"/>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/util/xxhash/*.c"/>
			</source>
		</build>
	</target>

	<target name="-update-dependencies" unless="${build.offline}">
		<mkdir dir="${lib}/macosx/x64"/>

		<update-dependency name="dyncall" artifact="x64/libdyncall_s.a"/>
		<update-dependency name="dyncallback" artifact="x64/libdyncallback_s.a"/>
		<update-dependency name="dynload" artifact="x64/libdynload_s.a"/>

		<update-dependency name="bgfx" artifact="x64/libbgfx.dylib" dest="${lib}" if:true="${binding.bgfx}"/>
		<update-dependency name="jemalloc" artifact="x64/libjemalloc.dylib" dest="${lib}" if:true="${binding.jemalloc}"/>
		<update-dependency name="glfw3" artifact="x64/libglfw.dylib" dest="${lib}" if:true="${binding.glfw}"/>
		<update-dependency name="OpenAL32" artifact="x64/libopenal.dylib" dest="${lib}" if:true="${binding.openal}"/>

		<chmod dir="${lib}" perm="755" includes="*.dylib"/>
	</target>
</project>
